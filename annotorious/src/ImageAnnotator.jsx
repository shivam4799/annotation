import React, { Component } from 'react';
import AnnotationLayer from './AnnotationLayer';
import { Editor } from '@recogito/recogito-client-core';

import './ImageAnnotator.scss';

export default class ImageAnnotator extends Component  {

  state = {
    selectedAnnotation: null,
    selectedDOMElement: null,
    modifiedTarget: null,

    applyTemplate: null,
    applyImmediately: null
  }

  /** Shorthand **/
  clearState = () => this.setState({
    selectedAnnotation: null,
    selectedDOMElement: null,
    modifiedTarget: null
  });

  componentDidMount() {
    this.annotationLayer = new AnnotationLayer(this.props);

    // A new shape selection was created with a drawing tool
    this.annotationLayer.on('createSelection', this.handleCreateSelection);

    // An existing annotation was selected
    this.annotationLayer.on('select', this.handleSelect);

    // The current selection shape was moved, resized or changed
    this.annotationLayer.on('updateTarget', this.handleUpdateTarget);

    // Mouse entered or left an annotation shape
    this.annotationLayer.on('mouseEnterAnnotation', this.handleMouseEnter);
    this.annotationLayer.on('mouseLeaveAnnotation', this.handleMouseLeave);
  }

  componentWillUnmount() {
    this.annotationLayer.destroy();
  }

  handleCreateSelection = selection => 
    this.props.onSelectionCreated(selection.clone());

  handleSelect = evt => {
    const { annotation, element, skipEvent } = evt;
    if (annotation) {
      this.setState({ 
        selectedAnnotation: annotation,
        selectedDOMElement: element
      });

      if (!annotation.isSelection && !skipEvent)
        this.props.onAnnotationSelected(annotation.clone());
    } else {
      this.clearState();
    }
  }

  handleUpdateTarget = (selectedDOMElement, modifiedTarget) => {
    this.setState({ selectedDOMElement, modifiedTarget });

    const clone = JSON.parse(JSON.stringify(modifiedTarget));
    this.props.onSelectionTargetChanged(clone);
  }

  handleMouseEnter = annotation =>
    this.props.onMouseEnterAnnotation(annotation.clone());

  handleMouseLeave = annotation =>
    this.props.onMouseLeaveAnnotation(annotation.clone());

  /**
   * A convenience method that allows the external application to
   * override the autogenerated Id for an annotation.
   */
  overrideAnnotationId = originalAnnotation => forcedId => {
    const { id } = originalAnnotation;

    // Force the editor to close first, otherwise there's a risk of orphaned annotation
    if (this.state.selectedAnnotation) {
      this.setState({
        selectedAnnotation: null,
        selectedDOMElement: null,
        modifiedTarget: null
      }, () => {
        this.annotationLayer.overrideId(id, forcedId);
      });
    } else {
      this.annotationLayer.overrideId(id, forcedId);
    }
  }

  /**************************/  
  /* Annotation CRUD events */
  /**************************/  

  /** Common handler for annotation CREATE or UPDATE **/
  onCreateOrUpdateAnnotation = method => (annotation, previous) => {
    // Merge updated target if necessary
    const a = (this.state.modifiedTarget) ?
      annotation.clone({ target: this.state.modifiedTarget }) : annotation.clone();

    this.clearState();    
    this.annotationLayer.deselect();
    this.annotationLayer.addOrUpdateAnnotation(a, previous);

    // Call CREATE or UPDATE handler
    if (previous)
      this.props[method](a, previous.clone());
    else
      this.props[method](a, this.overrideAnnotationId(a));
  }

  onDeleteAnnotation = annotation => {
    this.clearState();
    this.annotationLayer.removeAnnotation(annotation);
    this.props.onAnnotationDeleted(annotation);
  }

  /** Cancel button on annotation editor **/
  onCancelAnnotation = () => {
    this.clearState();
    this.annotationLayer.deselect();
  }

  /****************/               
  /* External API */
  /****************/    

  addAnnotation = annotation =>
    this.annotationLayer.addOrUpdateAnnotation(annotation.clone());

  removeAnnotation = annotation =>
    this.annotationLayer.removeAnnotation(annotation.clone());

  setAnnotations = annotations =>
    this.annotationLayer.init(annotations.map(a => a.clone()));

  getAnnotations = () =>
    this.annotationLayer.getAnnotations().map(a => a.clone());

  getSelected = () => {
    const selected = this.annotationLayer.getSelected();
    return selected ? selected.annotation.clone() : null;
  }

  setDrawingTool = shape =>
    this.annotationLayer.setDrawingTool(shape);

  setVisible = visible =>
    this.annotationLayer.setVisible(visible);

  selectAnnotation = arg => {
    const annotation = this.annotationLayer.selectAnnotation(arg);
    
    if (annotation)
      return annotation.clone();
    else
      this.clearState(); // Deselect
  }

  updateSelected = annotation => {
    if (this.state.selectedAnnotation)
      this.setState({ selectedAnnotation: annotation });
    else
      console.warn('No selection - cannot update');
  }

  applyTemplate = (bodies, openEditor) =>
    this.setState({ applyTemplate: bodies, applyImmediately: !openEditor });
    
  render() {
    // The editor should open under normal conditions (no headless mode, annotation was selected),
    // or if we are in headless mode for immediate template application 
    const normalConditions = this.state.selectedAnnotation && !this.props.config.headless;

    const headlessApply =
      this.props.config.headless && 
      this.state.applyTemplate && 
      this.state.selectedAnnotation?.isSelection;

    const open = (normalConditions == true || headlessApply == true);

    const readOnly = this.props.config.readOnly || this.state.selectedAnnotation?.readOnly

    return (open && (
      <Editor
        wrapperEl={this.props.wrapperEl}
        annotation={this.state.selectedAnnotation}
        selectedElement={this.state.selectedDOMElement}
        readOnly={readOnly}
        config={this.props.config}
        env={this.props.env}
        applyTemplate={this.state.applyTemplate}
        applyImmediately={this.state.applyImmediately}
        onAnnotationCreated={this.onCreateOrUpdateAnnotation('onAnnotationCreated')}
        onAnnotationUpdated={this.onCreateOrUpdateAnnotation('onAnnotationUpdated')}
        onAnnotationDeleted={this.onDeleteAnnotation}
        onCancel={this.onCancelAnnotation} />
    ))
  }

}
